/*
   SunVox modular synthesizer
   Copyright (c) 2008 - 2018, Alexander Zolotov <nightradio@gmail.com>, WarmPlace.ru
*/

SV_INIT_FLAG_NO_DEBUG_OUTPUT = 1 << 0
SV_INIT_FLAG_USER_AUDIO_CALLBACK = 1 << 1
SV_INIT_FLAG_AUDIO_INT16 = 1 << 2
SV_INIT_FLAG_AUDIO_FLOAT32 = 1 << 3
SV_INIT_FLAG_ONE_THREAD = 1 << 4

SV_MODULE_FLAG_EXISTS = 1
SV_MODULE_FLAG_EFFECT = 2
SV_MODULE_INPUTS_OFF = 16
SV_MODULE_INPUTS_MASK = 255 << SV_MODULE_INPUTS_OFF
SV_MODULE_OUTPUTS_OFF = 16 + 8
SV_MODULE_OUTPUTS_MASK = 255 << SV_MODULE_OUTPUTS_OFF

SV_STYPE_INT16 = 0
SV_STYPE_INT32 = 1
SV_STYPE_FLOAT32 = 2
SV_STYPE_FLOAT64 = 3

fn sv_load_dll()
{
    svl = -1
    if strstr( OS_NAME, "win32" ) >= 0
    {
	svl = dlopen( SUNVOX_LIB_WIN32 )
    }
    if svl == -1 && strstr( OS_NAME, "android" ) >= 0
    {
        if strstr( ARCH_NAME, "armv7-a" ) >= 0
        {
            svl = dlopen( SUNVOX_LIB_ANDROID_ARM_V7A )
        }
        if svl == -1 && strstr( ARCH_NAME, "arm" ) >= 0
        {
            svl = dlopen( SUNVOX_LIB_ANDROID_ARM )
        }
        if svl == -1 && strstr( ARCH_NAME, "x86" ) >= 0
        {
            svl = dlopen( SUNVOX_LIB_ANDROID_X86 )
        }
    }
    if svl == -1 && strstr( OS_NAME, "linux" ) >= 0
    {
	if strstr( ARCH_NAME, "x86_64" ) >= 0
	{
	    svl = dlopen( SUNVOX_LIB_LINUX_X86_64 )
	}
        if svl == -1 && strstr( ARCH_NAME, "x86" ) >= 0
	{
    	    svl = dlopen( SUNVOX_LIB_LINUX_X86 )
	}
    }
    if svl == -1 && strstr( OS_NAME, "osx" ) >= 0
    {
	if strstr( ARCH_NAME, "x86_64" ) >= 0
	{
	    svl = dlopen( SUNVOX_LIB_OSX_X86_64 )
	}
    }
    if svl == -1
    {
	printf( "SunVox library not found\n" )
    }
    else
    {
	sv_audio_callback = dlsym( svl, "sv_audio_callback", "i(piiI)" )
	sv_audio_callback2 = dlsym( svl, "sv_audio_callback2", "i(piiIiip)" )
	sv_init = dlsym( svl, "sv_init", "i(piii)" )
	sv_deinit = dlsym( svl, "sv_deinit", "i()" )
	sv_update_input = dlsym( svl, "sv_update_input", "i()" )
	sv_get_sample_type = dlsym( svl, "sv_get_sample_type", "i()" )
	sv_open_slot = dlsym( svl, "sv_open_slot", "i(i)" )
	sv_close_slot = dlsym( svl, "sv_close_slot", "i(i)" )
	sv_lock_slot = dlsym( svl, "sv_lock_slot", "i(i)" )
	sv_unlock_slot = dlsym( svl, "sv_unlock_slot", "i(i)" )
	sv_load = dlsym( svl, "sv_load", "i(ip)" )
	sv_load_from_memory = dlsym( svl, "sv_load_from_memory", "i(ipI)" )
	sv_play = dlsym( svl, "sv_play", "i(i)" )
	sv_play_from_beginning = dlsym( svl, "sv_play_from_beginning", "i(i)" )
	sv_stop = dlsym( svl, "sv_stop", "i(i)" )
	sv_set_autostop = dlsym( svl, "sv_set_autostop", "i(ii)" )
	sv_end_of_song = dlsym( svl, "sv_end_of_song", "i(i)" )
	sv_rewind = dlsym( svl, "sv_rewind", "i(ii)" )
	sv_volume = dlsym( svl, "sv_volume", "i(ii)" )
	sv_send_event = dlsym( svl, "sv_send_event", "i(iiiiiii)" )
	sv_get_current_line = dlsym( svl, "sv_get_current_line", "i(i)" )
	sv_get_current_line2 = dlsym( svl, "sv_get_current_line2", "i(i)" )
	sv_get_current_signal_level = dlsym( svl, "sv_get_current_signal_level", "i(ii)" )
	sv_get_song_name = dlsym( svl, "sv_get_song_name", "p(i)" )
	sv_get_song_bpm = dlsym( svl, "sv_get_song_bpm", "i(i)" )
	sv_get_song_tpl = dlsym( svl, "sv_get_song_tpl", "i(i)" )
	sv_get_song_length_frames = dlsym( svl, "sv_get_song_length_frames", "I(i)" )
	sv_get_song_length_lines = dlsym( svl, "sv_get_song_length_lines", "I(i)" )
	sv_new_module = dlsym( svl, "sv_new_module", "i(ippiii)" )
	sv_remove_module = dlsym( svl, "sv_remove_module", "i(ii)" )
	sv_connect_module = dlsym( svl, "sv_connect_module", "i(iii)" )
	sv_disconnect_module = dlsym( svl, "sv_disconnect_module", "i(iii)" )
	sv_load_module = dlsym( svl, "sv_load_module", "i(ipiii)" )
	sv_load_module_from_memory = dlsym( svl, "sv_load_module_from_memory", "i(ipIiii)" )
	sv_sampler_load = dlsym( svl, "sv_sampler_load", "i(iipi)" )
	sv_sampler_load_from_memory = dlsym( svl, "sv_sampler_load_from_memory", "i(iipIi)" )
	sv_get_number_of_modules = dlsym( svl, "sv_get_number_of_modules", "i(i)" )
	sv_get_module_flags = dlsym( svl, "sv_get_module_flags", "i(ii)" )
	sv_get_module_inputs = dlsym( svl, "sv_get_module_inputs", "p(ii)" )
	sv_get_module_outputs = dlsym( svl, "sv_get_module_outputs", "p(ii)" )
	sv_get_module_name = dlsym( svl, "sv_get_module_name", "p(ii)" )
	sv_get_module_xy = dlsym( svl, "sv_get_module_xy", "i(ii)" )
	sv_get_module_color = dlsym( svl, "sv_get_module_color", "i(ii)" )
	sv_get_module_scope = dlsym( svl, "sv_get_module_scope", "p(iiipp)" )
	sv_get_module_scope2 = dlsym( svl, "sv_get_module_scope2", "I(iiipI)" )
	sv_get_number_of_module_ctls = dlsym( svl, "sv_get_number_of_module_ctls", "i(ii)" )
	sv_get_module_ctl_name = dlsym( svl, "sv_get_module_ctl_name", "p(iii)" )
	sv_get_module_ctl_value = dlsym( svl, "sv_get_module_ctl_value", "i(iiii)" )
	sv_get_number_of_patterns = dlsym( svl, "sv_get_number_of_patterns", "i(i)" )
	sv_get_pattern_x = dlsym( svl, "sv_get_pattern_x", "i(ii)" )
	sv_get_pattern_y = dlsym( svl, "sv_get_pattern_y", "i(ii)" )
	sv_get_pattern_tracks = dlsym( svl, "sv_get_pattern_tracks", "i(ii)" )
	sv_get_pattern_lines = dlsym( svl, "sv_get_pattern_lines", "i(ii)" )
	sv_get_pattern_data = dlsym( svl, "sv_get_pattern_data", "p(ii)" )
	sv_pattern_mute = dlsym( svl, "sv_pattern_mute", "i(iii)" )
	sv_get_ticks = dlsym( svl, "sv_get_ticks", "I()" )
	sv_get_ticks_per_second = dlsym( svl, "sv_get_ticks_per_second", "I()" )
	sv_get_log = dlsym( svl, "sv_get_log", "p(i)" )
	fputs( "SunVox library loaded\n" )
    }
    ret( svl )
}

fn sv_unload_dll()
{
    dlclose( svl )
    fputs( "SunVox library unloaded\n" )
}

fn c_string( $str )
{
    $slen = strlen( $str )
    resize( $str, $slen + 1, 1 )
    $str[ $slen ] = 0
    ret( $str )
}
